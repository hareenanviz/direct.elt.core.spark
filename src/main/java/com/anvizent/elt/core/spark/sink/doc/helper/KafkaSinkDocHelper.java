package com.anvizent.elt.core.spark.sink.doc.helper;

import com.anvizent.elt.core.spark.constant.ConfigConstants.General;
import com.anvizent.elt.core.spark.constant.ConfigConstants.Messaging;
import com.anvizent.elt.core.spark.constant.HelpConstants.Type;
import com.anvizent.elt.core.spark.constant.KafkaSinkWriteFormat;
import com.anvizent.elt.core.spark.doc.helper.DocHelper;
import com.anvizent.elt.core.spark.exception.InvalidParameter;
import com.anvizent.elt.core.spark.factory.Factory;

/**
 * @author Hareen Bejjanki
 * @author Apurva Deshmukh
 *
 */
public class KafkaSinkDocHelper extends DocHelper {

	public KafkaSinkDocHelper(Factory factory) throws InvalidParameter {
		super(factory);
	}

	@Override
	public String[] getDescription() {
		return new String[] { "Writes the data into give Kafka topic." };
	}

	@Override
	public void addConfigDescriptions() throws InvalidParameter {
		configDescriptionUtil.addConfigDescription(Messaging.BOOTSTRAP_SERVERS, General.YES, "",
				new String[] { "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster. ",
						"The client will make use of all servers irrespective of which servers are specified here for bootstrapping—this list only impacts the initial hosts "
								+ "used to discover the full set of servers. ",
						"This list should be in the form host1:port1,host2:port2,.... Since these servers are just used for the initial connection to discover the full cluster membership "
								+ "(which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down)." },
				"", Type.LIST_OF_STRINGS);

		configDescriptionUtil.addConfigDescription(Messaging.TOPIC, General.NO, "", new String[] { "Topic into which messages to write. If '"
				+ Messaging.TOPIC_FIELD + "' is provided this value is considered as default value, when '" + Messaging.TOPIC_FIELD + "' is null" }, "",
				Type.STRING);
		configDescriptionUtil.addConfigDescription(Messaging.TOPIC_FIELD, General.NO, "",
				new String[] { "A field which contains the name of the Topic into which current message to be written" }, "", Type.STRING);
		configDescriptionUtil.addConfigDescription(Messaging.KEY_FIELD, General.NO, "",
				new String[] {
						"A field which contains the key value current message to be written. If not provided or value is null long representation of the current date." },
				"", Type.STRING);
		configDescriptionUtil.addConfigDescription(Messaging.FORMAT, General.NO, KafkaSinkWriteFormat.JSON.name(),
				new String[] { "Format in which rest of the record(if '" + Messaging.TOPIC_FIELD + "' and '" + Messaging.KEY_FIELD
						+ "' are provided) to be written. Only JSON format, and plain test format (if only single record is left to write) are supported" },
				"", Type.STRING);
		configDescriptionUtil.addConfigDescription(Messaging.DATE_FORMAT, General.NO, "Long milliseconds format",
				new String[] { "If provided will convert all date fields to given date format or to long milliseconds format" }, "", Type.STRING);

		configDescriptionUtil.addConfigDescription(Messaging.BUFFER_MEMORY, General.NO, "33554432",
				new String[] { "The total bytes of memory the producer can use to buffer records waiting to be sent to the server.",
						"If records are sent faster than they can be delivered to the server the producer will block for max.block.msafter which it will throw an exception.",
						"This setting should correspond roughly to the total memory the producer will use, but is not a hard bound since not all memory the producer uses is used for buffering.",
						"Some additional memory will be used for compression (if compression is enabled) as well as for maintaining in-flight requests." },
				"", Type.LONG);
		configDescriptionUtil.addConfigDescription(Messaging.COMPRESSION_TYPE, General.NO, "none",
				new String[] {
						"The compression type for all data generated by the producer. The default is none (i.e. no compression). Valid values are none, gzip, snappy, or lz4.",
						"Compression is of full batches of data, so the efficacy of batching will also impact the compression ratio (more batching means better compression)." },
				"", Type.LIST_OF_STRINGS);
		configDescriptionUtil.addConfigDescription(Messaging.RETRIES, General.NO, "0",
				new String[] {
						"Setting a value greater than zero will cause the client to resend any record whose send fails with a potentially transient error.",
						"Note that this retry is no different than if the client resent the record upon receiving the error.",
						"Allowing retries without setting max.in.flight.requests.per.connection to 1 will potentially change the ordering of records because if two batches are "
								+ "sent to a single partition, and the first fails and is retried but the second succeeds, then the records in the second batch may appear first." },
				"", Type.INTEGER);
		configDescriptionUtil.addConfigDescription(Messaging.BATCH_SIZE, General.NO, "16384",
				new String[] {
						"The producer will attempt to batch records together into fewer requests whenever multiple records are being sent to the same partition.",
						"This helps performance on both the client and the server. This configuration controls the default batch size in bytes.",
						"No attempt will be made to batch records larger than this size. Requests sent to brokers will contain multiple batches, one for each partition with data "
								+ "available to be sent. A small batch size will make batching less common and may reduce throughput (a batch size of zero will disable batching entirely).",
						"A very large batch size may use memory a bit more wastefully as we will always allocate a buffer of the specified batch size in anticipation of additional records." },
				"", Type.INTEGER);
		configDescriptionUtil.addConfigDescription(Messaging.CONNECTIONS_MAX_IDLE_MS, General.NO, "540000",
				new String[] { "Close idle connections after the number of milliseconds specified by this config." }, "", Type.LONG);
		configDescriptionUtil.addConfigDescription(Messaging.LINGER_MS, General.NO, "0",
				new String[] { "The producer groups together any records that arrive in between request transmissions into a single batched request.",
						"Normally this occurs only under load when records arrive faster than they can be sent out.",
						"However in some circumstances the client may want to reduce the number of requests even under moderate load.",
						"This setting accomplishes this by adding a small amount of artificial delay—that is, rather than immediately sending out a record the producer will wait "
								+ "for up to the given delay to allow other records to be sent so that the sends can be batched together.",
						"This can be thought of as analogous to Nagle's algorithm in TCP. This setting gives the upper bound on the delay for batching: once we get batch.sizeworth "
								+ "of records for a partition it will be sent immediately regardless of this setting, however if we have fewer than this many bytes accumulated for this "
								+ "partition we will 'linger' for the specified time waiting for more records to show up. This setting defaults to 0 (i.e. no delay).",
						"Setting linger.ms=5, for example, would have the effect of reducing the number of requests sent but would add up to 5ms of latency to records "
								+ "sent in the absence of load." },
				"", Type.LONG);
		configDescriptionUtil.addConfigDescription(Messaging.MAX_BLOCK_MS, General.NO, "60000",
				new String[] { "The configuration controls how long KafkaProducer.send() and KafkaProducer.partitionsFor()will block.",
						"These methods can be blocked either because the buffer is full or metadata unavailable. Blocking in the user-supplied serializers or partitioner will not be "
								+ "counted against this timeout." },
				"", Type.LONG);
		configDescriptionUtil.addConfigDescription(Messaging.REQUEST_TIMEOUT_MS, General.NO, "30000",
				new String[] { "The configuration controls the maximum amount of time the client will wait for the response of a request.",
						"If the response is not received before the timeout elapses the client will resend the request if necessary or fail the request if retries are exhausted.",
						"This should be larger than replica.lag.time.max.ms (a broker configuration) to reduce the possibility of message duplication due to unnecessary producer retries." },
				"", Type.LIST_OF_STRINGS);
		configDescriptionUtil.addConfigDescription(Messaging.RECONNECT_BACKOFF_MAX_MS, General.NO, "1000",
				new String[] { "The maximum amount of time in milliseconds to wait when reconnecting to a broker that has repeatedly failed to connect.",
						"If provided, the backoff per host will increase exponentially for each consecutive connection failure, up to this maximum.",
						"After calculating the backoff increase, 20% random jitter is added to avoid connection storms." },
				"", Type.LONG);
		configDescriptionUtil.addConfigDescription(Messaging.RECONNECT_BACKOFF_MS, General.NO, "50",
				new String[] {
						"The base amount of time to wait before attempting to reconnect to a given host. This avoids repeatedly connecting to a host in a tight loop.",
						"This backoff applies to all connection attempts by the client to a broker." },
				"", Type.LONG);
		configDescriptionUtil.addConfigDescription(Messaging.RETRY_BACKOFF_MS, General.NO, "100",
				new String[] { "The amount of time to wait before attempting to retry a failed request to a given topic partition.",
						"This avoids repeatedly sending requests in a tight loop under some failure scenarios." },
				"", Type.LONG);
	}
}